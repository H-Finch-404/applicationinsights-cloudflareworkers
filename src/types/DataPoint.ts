// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// THIS FILE WAS AUTOGENERATED
import { DataPointType } from './DataPointType'
import { DataSanitizer } from '../DataSanitizer'

interface DataPointInterface {
	/**
	 * Name of the metric.
	 */
	name: string

	/**
	 * Metric type. Single measurement or the aggregated value.
	 */
	kind?: DataPointType

	/**
	 * Single value for measurement. Sum of individual measurements for the aggregation.
	 */
	value: number

	/**
	 * Metric weight of the aggregated metric. Should not be set for a measurement.
	 */
	count?: number

	/**
	 * Minimum value of the aggregated metric. Should not be set for a measurement.
	 */
	min?: number

	/**
	 * Maximum value of the aggregated metric. Should not be set for a measurement.
	 */
	max?: number

	/**
	 * Standard deviation of the aggregated metric. Should not be set for a measurement.
	 */
	stdDev?: number
}

/**
 * Metric data single measurement.
 */
export class DataPoint { /**
	 * Name of the metric.
	 */
	public name : string

	/**
	 * Metric type. Single measurement or the aggregated value.
	 */
	public kind : DataPointType

	/**
	 * Single value for measurement. Sum of individual measurements for the aggregation.
	 */
	public value : number

	/**
	 * Metric weight of the aggregated metric. Should not be set for a measurement.
	 */
	public count : number

	/**
	 * Minimum value of the aggregated metric. Should not be set for a measurement.
	 */
	public min : number

	/**
	 * Maximum value of the aggregated metric. Should not be set for a measurement.
	 */
	public max : number

	/**
	 * Standard deviation of the aggregated metric. Should not be set for a measurement.
	 */
	public stdDev : number

	constructor(options: DataPointInterface) {
		this.kind = options.kind || DataPointType.Measurement
		this.name = DataSanitizer.sanitizeKey(options.name)
		this.value = options.value
		this.count = options.count
		this.min = options.max
		this.max = options.max
		this.stdDev = options.stdDev
	}
}
